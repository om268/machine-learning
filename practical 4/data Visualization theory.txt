Aim: Write a Python program to demonstrate various Data Visualization 
Techniques. 

Objective: 
To understand the importance of visualizing data.
To demonstrate different types of plots using Matplotlib and Seaborn.
To observe data patterns, detect anomalies, and draw insights from real-world data using visual techniques.
To enhance data storytelling ability ‚Äî helping users and stakeholders make decisions based on visual data summaries.
To reinforce the data preprocessing and analysis workflow by integrating it with visualization steps.

Theory :

What is Data Visualization?

Data Visualization is the graphical representation of data and information. It allows us to present data in a visual context, such as graphs or charts, making it easier to identify patterns, trends, and correlations that might go unnoticed in raw tabular data.
In the field of data science and machine learning, visualization is a crucial step for:
Understanding the dataset
Detecting missing or abnormal values
Identifying feature relationships
Evaluating models and results

Why is Data Visualization Important?

Raw data, especially large datasets, can be difficult to interpret without proper visuals. Visualization:
Helps understand the distribution and structure of data.
Assists in feature selection by showing correlation and importance.
Is used to detect outliers and anomalies in data.
Helps in decision-making by providing clear insights.

Example:
Imagine a dataset with monthly sales of a product. A line chart can instantly show whether sales are increasing or decreasing ‚Äî something that's hard to tell just by looking at numbers in a table.

Tools and Libraries Used
Python provides several powerful libraries for data visualization:

Library	Description
Matplotlib	Foundation library for static, animated, and interactive visualizations
Seaborn	Built on top of Matplotlib, provides high-level interface for attractive and informative statistical graphics
Pandas	Used for loading, manipulating, and analyzing structured data (especially CSVs)

üîç Types of Data Visualization Techniques
Here are some commonly used techniques:

üìà 1. Line Plot
Used to visualize data over time or continuous index values.

Example:
Trend of monthly sales or temperature readings.

plt.plot(df['Month'], df['Sales'])


üìä 2. Bar Chart
Used to compare values across different categories (e.g., regions, products).

sns.barplot(x='Month', y='Profit', data=df)


üìâ 3. Histogram
Used to understand the distribution (spread) of a numerical column.

plt.hist(df['Units_Sold'])


üì¶ 4. Box Plot
Displays the spread of data through quartiles and highlights outliers.

Useful for: Comparing multiple groups.

sns.boxplot(x='Region', y='Sales', data=df)


üîó 5. Scatter Plot
Used to observe relationships (correlation) between two numeric variables.

sns.scatterplot(x='Sales', y='Profit', data=df)


üî• 6. Heatmap
A colored matrix that visualizes the correlation between features. Strong correlations are darker or brighter depending on the color palette.

sns.heatmap(df.corr(), annot=True)

Python Libraries Used in Data Visualization

1. üêº Pandas
Library for: Data loading, cleaning, and manipulation

Overview:

Pandas stands for Python Data Analysis Library.

Provides two main data structures:

Series (1D)

DataFrame (2D table)

Used to load data from CSV, Excel, JSON, etc.

Common Uses in Visualization:

Loading CSV files: pd.read_csv("file.csv")

Exploring data: df.head(), df.describe(), df.columns

Selecting columns for plotting

Example:


import pandas as pd
df = pd.read_csv("sales_data.csv")
print(df.head())


2. üìà Matplotlib
Library for: Creating basic visualizations like line plots, bar charts, histograms, pie charts, etc.

Overview:

One of the oldest and most widely used libraries for plotting in Python.

Provides fine control over every element of the plot (title, labels, size, color, etc.).

Used for both 2D and basic 3D plotting.

Common Functions:

plt.plot() ‚Äî line chart

plt.bar() ‚Äî bar chart

plt.hist() ‚Äî histogram

plt.scatter() ‚Äî scatter plot

plt.show() ‚Äî display the plot

Example:

import matplotlib.pyplot as plt
plt.plot(df['Month'], df['Sales'])
plt.title("Monthly Sales")
plt.xlabel("Month")
plt.ylabel("Sales")
plt.show()


3. üåà Seaborn
Library for: Advanced, statistical, and attractive data visualizations

Overview:

Built on top of Matplotlib

Provides prettier, more informative charts with less code.

Especially good for dataframes and statistical plots

Common Functions:

sns.barplot() ‚Äî bar chart with confidence intervals

sns.boxplot() ‚Äî shows quartiles, outliers

sns.histplot() ‚Äî distribution histogram

sns.scatterplot() ‚Äî relationship between two features

sns.heatmap() ‚Äî color-coded matrix showing correlation

Example:


import seaborn as sns
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')

üßÆ Why Use These Libraries Together?

Library	Purpose
pandas	Load and organize your data
matplotlib	Create flexible and detailed plots
seaborn	Create beautiful and statistical plots with less effort

They are often used together:

pandas prepares the data

seaborn or matplotlib visualize it

‚úÖ Summary Table
Library	Full Name	Use Case
pandas	Python Data Analysis Library	Reading, cleaning, and selecting data
matplotlib.pyplot	Plotting Library for Python	Basic plotting (line, bar, hist, scatter)
seaborn	Statistical Data Visualization	Advanced, attractive plots, heatmaps


Sample Output:

Line graph 
Bar chart 
Histogram 
Box plot 
Heatmap 

(Outputs are visual plots shown one by one when program runs.)

‚úÖ Result:
Various data visualization techniques were successfully demonstrated using the sales dataset loaded from a CSV file.